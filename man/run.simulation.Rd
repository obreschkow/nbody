% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.simulation.R
\name{run.simulation}
\alias{run.simulation}
\title{Run a direct N-body simulation}
\usage{
run.simulation(sim, measure.time = TRUE)
}
\arguments{
\item{sim}{structured list of simulation settings, which must contain the following sublists:\cr\cr

\code{ics} is the sublist of initial conditions. It must contain the items:\cr
\code{m} = N-vector with the masses of the N particles\cr
\code{x} = N-by-3 matrix specifying the initial position in Cartesian coordinates\cr
\code{v} = N-by-3 matrix specifying the initial velocities\cr\cr

\code{para} is the sublist of optional simulation parameters. It contains the items:\cr
\code{t.max} = final simulation time in simulation units (see details). If not given, a characteristic time is computed as \code{t.max = 2*pi*sqrt(R^3/GM)}, where \code{R} is the RMS radius and \code{M} is the total mass.\cr
\code{dt.max} = maximum time step. If not given, no maximum time step is imposed, meaning that the maximum time step is either equal to \code{dt.out} or the adaptive time step, whichever is smaller.\cr
\code{dt.min} = minimum time step used, unless a smaller time step is required to save an output or to land precisely on the final time \code{t.max}.
\code{dt.out} = output time step, i.e. time step between successive snapshots in the \code{output} sublist returned by \code{run.simulation}. If not given, \code{dt.max=t.max/100} is assumed.\cr
\code{eta} = scaling of adaptive time step. Smaller values lead to proportionally smaller adaptive time steps. Typical values range between 0.001 and 0.1. If not given, a default value of 0.01 is assumed. To use fixed time steps, set \code{eta=1e99} and set a time step \code{dt.max}.\cr
\code{integrator} = character string specifying the integrator to be used. Currently implemented integrators are 'euler' (1st order), 'leapfrog' (2nd order), 'yoshida' (4th order), 'yoshida6' (6th order). If not given, 'leapfrog' is the default integrator.\cr
\code{rsmooth} = optional smoothing radius. If not given, no smoothing is assumed.\cr
\code{afield} = a function(x,t) of positions \code{x} (N-by-3 matrix) and time \code{t} (scalar), specifying the external acceleration field. It must return an N-by-3 matrix. If not given, no external field is assumed.\cr
\code{G} = gravitational constant in simulation units (see details). If not given, the SI value specified in \code{\link{cst}} is used.

\code{code} is the sublist of optional variables used when calling external simulation codes. It contains the items:\cr
\code{name} = character string specifying the name of the code, currently available options are "R" (default) and "nbodyx" (a simple, but fast N-body simulator in Fortran).
\code{file} = character string specifying the path+filename of the external compiled simulation code.
\code{interface} = character string specifying a temporary working path used as interface with external codes. If not given, the current working directory is used by default.}

\item{measure.time}{logical flag that determines whether time computation time will be measured and displayed.}
}
\value{
The routine returns the structured list of the input argument, with one sublist \code{output} added. This sublist contains the items:
\item{t}{k-vector with the simulation times of the k snapshots.}
\item{x}{k-by-N-by-3 array giving the 3D coordinates of the N particles in k snapshots.}
\item{v}{k-by-N-by-3 array giving the 3D velocities of the N particles in k snapshots.}
\item{n.snapshots}{total number of snapshots.}
\item{n.iterations}{total number of iterations used to run the simulation.}
}
\description{
Run direct N-body simulations using a common adaptive time step.
}
\details{
UNITS: The initial conditions (in the sublist \code{ics}) can be provided in any units. The units of mass, length and velocity then fix the other units.
For instance, [unit of time in seconds] = [unit of length in meters] / [unit of velocity in m/s]. E.g., if initial positions are given in units of 1AU=1.49598e11m and velocities in units of 1km/s, one unit of time is 1.49598e8sâ‰ˆ4.74yrs.
Likewise, units of the gravitational constant \code{G} are given via [unit of G in m^3*kg^(-1)*s^(-2)] = [unit of length in meters] * [unit of velocity in m/s]^2 / [unit of mass in kg]. E.g., for length units of 1AU=1.49598e11m, velocity units of 1km/s=1e3m/s and mass units of 1Msun=1.98847e30kg, a unit of G is
7.523272e-14 m^3*kg^(-1)*s^(-2). In these units the true value of G is about 887.154.
}
\examples{
sim = setup.halley()
sim = run.simulation(sim)
plot(sim, units=cst$AU, xlim=c(-20,60), ylim=c(-40,40), xlab='[AU]', ylab='[AU]')
cat(sprintf('This simulation was run with \%d iterations.\n',sim$output$n.iterations))

}
\author{
Danail Obreschkow
}
\keyword{N-body}
\keyword{simulation}
